# TradeMasterOnline - Cursor 配置文件

## 项目概述
多人在线交易模拟游戏项目，使用 vibe coding 构建。

## 技术栈
- Python 3.12+
- uv (包管理器)
- ruff (代码格式化和检查)
- pre-commit (代码质量检查)

## 编码规范

### Python 代码规范
- 使用 Python 3.12+ 语法特性
- 遵循项目中的 ruff 配置
- 行长度限制：100 字符
- 使用单引号作为字符串引号
- 使用双引号作为文档字符串引号
- 支持中文注释和字符串
- 使用类型注解
- 避免相对导入
- 使用 pydantic 进行数据验证

### 项目结构
- 主要代码在 `tmo` 目录
- 示例代码在 `examples` 目录
- 文档在 `docs` 目录
- 测试文件在 `tests` 目录

## 开发工作流

### 日常开发
1. 使用 `uv run` 运行所有 Python 命令
2. 使用 `uv run ruff check` 检查代码质量
3. 使用 `uv run ruff format` 格式化代码

### 功能开发完成后的完整流程
1. **编写单元测试**：
   - 为每个新功能编写完整测试
   - 测试覆盖所有主要代码路径
   - 包含正常和异常情况测试
   - 使用 pytest 框架

2. **运行测试和检查覆盖度**：
   ```bash
   uv run pytest
   uv run pytest --cov=tmo --cov-report=html --cov-report=term-missing
   ```

3. **更新文档和元数据**：
   - 更新 `README.md` 和 `docs/` 目录
   - 检查 `pyproject.toml` 中的项目信息
   - 确保所有新功能都有完整的 docstring
   - 更新类型注解和注释

4. **代码质量检查**：
   ```bash
   uv run pre-commit run --all-files
   # 运行两次以处理自动修复后的遗留问题
   uv run pre-commit run --all-files
   ```

### 质量要求
- 所有测试必须通过
- 代码覆盖度建议 >80%
- 所有 pre-commit 检查通过
- 代码格式符合项目规范
- 没有语法错误或安全问题

### 测试规范
- 测试文件命名：`test_*.py`
- 测试函数命名：`test_*`
- 使用描述性的测试名称
- 每个测试函数只测试一个功能点
- 使用 fixtures 和 parametrize 减少重复代码
- 支持中文测试描述和注释

### 文档规范
- 使用中文编写用户文档
- 代码文档使用英文（符合 Python 惯例）
- 保持文档结构清晰和一致
- 编写清晰的提交信息

## AI 助手指导
- 优先使用 uv 管理依赖和运行命令
- 遵循项目的 ruff 配置进行代码格式化
- 支持中文注释和文档
- 使用类型注解提高代码质量
- 遵循项目的导入规范
- 使用 pydantic 进行数据模型定义
- 项目使用 vibe coding 方法
- 注意代码的可读性和可维护性
